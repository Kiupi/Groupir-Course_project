package com.groupir.backend.service;

import com.groupir.backend.model.Order;
import com.groupir.backend.repository.OrderRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

@Service
@Transactional
public class OrderService {

    @Autowired
    private OrderRepository orderRepository;

    /**
     *  Return all the orderes
     * @return list of all the orderes
     */
    public List<Order> findAll(){
        return (List<Order>) orderRepository.findAll();
    }

    /**
     *  Return all the orderes of a given user
     * @param userId the user id
     * @return list of all the orderes of the user
     */
    public List<Order> findAllFromUserId(int userId){
        return findAll().stream()
                        .filter(a -> userId == a.getUser().getUserId())
                        .collect(Collectors.toList());
    }

    /**
     *  Create a new order
     * @param newOrder the order
     * @return the id of the inserted order - generated by the database via autoincrement
     */
    public long add(Order newOrder){
        orderRepository.save(newOrder);
        return newOrder.getOrderId();
    }

    /**
     *  Delete the order given its id
     * @param orderId the order id
     */
    public void delete(long orderId){
        orderRepository.deleteById(orderId);
    }

    /**
     *  Modify an order
     * @param order the new
     */
    public void update(Order order){
        orderRepository.save(order);
    }

    /**
     *  Get the order with a given id
     * @param orderID the order id
     * @return the order
     */
    public Optional<Order> findById(long orderID){
        return orderRepository.findById(orderID);
    }

    /**
     *  Check if the order with a given id is in the database
     * @param orderID the order id
     * @return true if the order is in the database, else false
     */
    public boolean isPresent(long orderID){
        return orderRepository.findById(orderID).isPresent();
    }

    // TODO: choose default order
}
