package com.groupir.backend.service;

import com.groupir.backend.model.PaymentMethod;
import com.groupir.backend.repository.PaymentMethodRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

@Service
@Transactional
public class PaymentMethodService {

    @Autowired
    private PaymentMethodRepository paymentMethodRepository;

    /**
     *  Return all the paymentMethods
     * @return list of all the paymentMethods
     */
    public List<PaymentMethod> findAll(){
        return (List<PaymentMethod>) paymentMethodRepository.findAll();
    }

    /**
     *  Return all the paymentMethods of a given user
     * @param userId the user id
     * @return list of all the paymentMethods of the user
     */
    public List<PaymentMethod> findAllFromUserId(int userId){
        return findAll().stream()
                        .filter(pm -> userId == pm.getUser().getUserId())
                        .collect(Collectors.toList());
    }

    /**
     *  Create a new paymentMethod
     * @param newPaymentMethod the paymentMethod
     * @return the id of the inserted paymentMethod - generated by the database via autoincrement
     */
    public long add(PaymentMethod newPaymentMethod){
        paymentMethodRepository.save(newPaymentMethod);
        return newPaymentMethod.getPaymentMethodId();
    }

    /**
     *  Delete the paymentMethod given its id
     * @param paymentMethodId the paymentMethod id
     */
    public void delete(long paymentMethodId){
        paymentMethodRepository.deleteById(paymentMethodId);
    }

    /**
     *  Modify an paymentMethod
     * @param paymentMethod the new
     */
    public void update(PaymentMethod paymentMethod){
        paymentMethodRepository.save(paymentMethod);
    }

    /**
     *  Get the paymentMethod with a given id
     * @param paymentMethodID the paymentMethod id
     * @return the paymentMethod
     */
    public Optional<PaymentMethod> findById(long paymentMethodID){
        return paymentMethodRepository.findById(paymentMethodID);
    }

    /**
     *  Check if the paymentMethod with a given id is in the database
     * @param paymentMethodID the paymentMethod id
     * @return true if the paymentMethod is in the database, else false
     */
    public boolean isPresent(long paymentMethodID){
        return paymentMethodRepository.findById(paymentMethodID).isPresent();
    }

    // TODO: choose default paymentMethod
}
